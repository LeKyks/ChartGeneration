/*
 * generated by Xtext 2.25.0
 */
grammar InternalChartIt;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.univcotedazurl3ia.project.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.univcotedazurl3ia.project.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.univcotedazurl3ia.project.services.ChartItGrammarAccess;

}

@parser::members {

 	private ChartItGrammarAccess grammarAccess;

    public InternalChartItParser(TokenStream input, ChartItGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected ChartItGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProgramAccess().getProgramAction_0(),
					$current);
			}
		)
		otherlv_1='P'
		{
			newLeafNode(otherlv_1, grammarAccess.getProgramAccess().getPKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getColonKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_STRING
				{
					newLeafNode(lv_name_3_0, grammarAccess.getProgramAccess().getNameSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgramRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_4());
		}
		otherlv_5='loadData'
		{
			newLeafNode(otherlv_5, grammarAccess.getProgramAccess().getLoadDataKeyword_5());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getLoadDataDataParserRuleCall_7_0());
				}
				lv_loadData_7_0=ruleData
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"loadData",
						lv_loadData_7_0,
						"fr.univcotedazurl3ia.project.ChartIt.Data");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getProgramAccess().getCommaKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getLoadDataDataParserRuleCall_8_1_0());
					}
					lv_loadData_9_0=ruleData
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"loadData",
							lv_loadData_9_0,
							"fr.univcotedazurl3ia.project.ChartIt.Data");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_9());
		}
		otherlv_11='col'
		{
			newLeafNode(otherlv_11, grammarAccess.getProgramAccess().getColKeyword_10());
		}
		otherlv_12='{'
		{
			newLeafNode(otherlv_12, grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_11());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getColColParserRuleCall_12_0());
				}
				lv_col_13_0=ruleCol
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"col",
						lv_col_13_0,
						"fr.univcotedazurl3ia.project.ChartIt.Col");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_14=','
			{
				newLeafNode(otherlv_14, grammarAccess.getProgramAccess().getCommaKeyword_13_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getColColParserRuleCall_13_1_0());
					}
					lv_col_15_0=ruleCol
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"col",
							lv_col_15_0,
							"fr.univcotedazurl3ia.project.ChartIt.Col");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_16='}'
		{
			newLeafNode(otherlv_16, grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_14());
		}
		otherlv_17='chart'
		{
			newLeafNode(otherlv_17, grammarAccess.getProgramAccess().getChartKeyword_15());
		}
		otherlv_18='{'
		{
			newLeafNode(otherlv_18, grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_16());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getChartChartParserRuleCall_17_0());
				}
				lv_chart_19_0=ruleChart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"chart",
						lv_chart_19_0,
						"fr.univcotedazurl3ia.project.ChartIt.Chart");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_20=','
			{
				newLeafNode(otherlv_20, grammarAccess.getProgramAccess().getCommaKeyword_18_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getChartChartParserRuleCall_18_1_0());
					}
					lv_chart_21_0=ruleChart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"chart",
							lv_chart_21_0,
							"fr.univcotedazurl3ia.project.ChartIt.Chart");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_22='}'
		{
			newLeafNode(otherlv_22, grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_19());
		}
		otherlv_23='}'
		{
			newLeafNode(otherlv_23, grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_20());
		}
	)
;

// Entry rule entryRuleData
entryRuleData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataRule()); }
	iv_ruleData=ruleData
	{ $current=$iv_ruleData.current; }
	EOF;

// Rule Data
ruleData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDataAccess().getDataAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDataAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getDataAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_path_3_0=RULE_STRING
				{
					newLeafNode(lv_path_3_0, grammarAccess.getDataAccess().getPathSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataRule());
					}
					setWithLastConsumed(
						$current,
						"path",
						lv_path_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getDataAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleChart
entryRuleChart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChartRule()); }
	iv_ruleChart=ruleChart
	{ $current=$iv_ruleChart.current; }
	EOF;

// Rule Chart
ruleChart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getChartAccess().getChartAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getChartAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChartRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getChartAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3='data'
		{
			newLeafNode(otherlv_3, grammarAccess.getChartAccess().getDataKeyword_3());
		}
		otherlv_4='='
		{
			newLeafNode(otherlv_4, grammarAccess.getChartAccess().getEqualsSignKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChartRule());
					}
				}
				otherlv_5=RULE_STRING
				{
					newLeafNode(otherlv_5, grammarAccess.getChartAccess().getDataDataCrossReference_5_0());
				}
			)
		)
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getChartAccess().getCommaKeyword_6());
		}
		otherlv_7='type'
		{
			newLeafNode(otherlv_7, grammarAccess.getChartAccess().getTypeKeyword_7());
		}
		otherlv_8='='
		{
			newLeafNode(otherlv_8, grammarAccess.getChartAccess().getEqualsSignKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChartAccess().getTypeChartTypeEnumRuleCall_9_0());
				}
				lv_type_9_0=ruleChartType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChartRule());
					}
					set(
						$current,
						"type",
						lv_type_9_0,
						"fr.univcotedazurl3ia.project.ChartIt.ChartType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10=','
		{
			newLeafNode(otherlv_10, grammarAccess.getChartAccess().getCommaKeyword_10());
		}
		otherlv_11='col'
		{
			newLeafNode(otherlv_11, grammarAccess.getChartAccess().getColKeyword_11());
		}
		otherlv_12='='
		{
			newLeafNode(otherlv_12, grammarAccess.getChartAccess().getEqualsSignKeyword_12());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChartRule());
					}
				}
				otherlv_13=RULE_STRING
				{
					newLeafNode(otherlv_13, grammarAccess.getChartAccess().getColColCrossReference_13_0());
				}
			)
		)
		(
			otherlv_14=','
			{
				newLeafNode(otherlv_14, grammarAccess.getChartAccess().getCommaKeyword_14_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getChartRule());
						}
					}
					otherlv_15=RULE_STRING
					{
						newLeafNode(otherlv_15, grammarAccess.getChartAccess().getColColCrossReference_14_1_0());
					}
				)
			)
		)*
		otherlv_16=','
		{
			newLeafNode(otherlv_16, grammarAccess.getChartAccess().getCommaKeyword_15());
		}
		otherlv_17='backgroundColor'
		{
			newLeafNode(otherlv_17, grammarAccess.getChartAccess().getBackgroundColorKeyword_16());
		}
		otherlv_18='='
		{
			newLeafNode(otherlv_18, grammarAccess.getChartAccess().getEqualsSignKeyword_17());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChartAccess().getBackgroundColorColorEnumRuleCall_18_0());
				}
				lv_backgroundColor_19_0=ruleColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChartRule());
					}
					set(
						$current,
						"backgroundColor",
						lv_backgroundColor_19_0,
						"fr.univcotedazurl3ia.project.ChartIt.Color");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_20=')'
		{
			newLeafNode(otherlv_20, grammarAccess.getChartAccess().getRightParenthesisKeyword_19());
		}
	)
;

// Entry rule entryRuleCol
entryRuleCol returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColRule()); }
	iv_ruleCol=ruleCol
	{ $current=$iv_ruleCol.current; }
	EOF;

// Rule Col
ruleCol returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getColAccess().getColAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getColAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getColAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3='label'
		{
			newLeafNode(otherlv_3, grammarAccess.getColAccess().getLabelKeyword_3());
		}
		otherlv_4='='
		{
			newLeafNode(otherlv_4, grammarAccess.getColAccess().getEqualsSignKeyword_4());
		}
		(
			(
				lv_label_5_0=RULE_STRING
				{
					newLeafNode(lv_label_5_0, grammarAccess.getColAccess().getLabelSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColRule());
					}
					setWithLastConsumed(
						$current,
						"label",
						lv_label_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getColAccess().getCommaKeyword_6());
		}
		otherlv_7='color'
		{
			newLeafNode(otherlv_7, grammarAccess.getColAccess().getColorKeyword_7());
		}
		otherlv_8='='
		{
			newLeafNode(otherlv_8, grammarAccess.getColAccess().getEqualsSignKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColAccess().getColorColorEnumRuleCall_9_0());
				}
				lv_color_9_0=ruleColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColRule());
					}
					set(
						$current,
						"color",
						lv_color_9_0,
						"fr.univcotedazurl3ia.project.ChartIt.Color");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10=')'
		{
			newLeafNode(otherlv_10, grammarAccess.getColAccess().getRightParenthesisKeyword_10());
		}
	)
;

// Rule Color
ruleColor returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Blue'
			{
				$current = grammarAccess.getColorAccess().getBlueEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getColorAccess().getBlueEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Red'
			{
				$current = grammarAccess.getColorAccess().getRedEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getColorAccess().getRedEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Green'
			{
				$current = grammarAccess.getColorAccess().getGreenEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getColorAccess().getGreenEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Orange'
			{
				$current = grammarAccess.getColorAccess().getOrangeEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getColorAccess().getOrangeEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Yellow'
			{
				$current = grammarAccess.getColorAccess().getYellowEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getColorAccess().getYellowEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Purple'
			{
				$current = grammarAccess.getColorAccess().getPurpleEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getColorAccess().getPurpleEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='Black'
			{
				$current = grammarAccess.getColorAccess().getBlackEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getColorAccess().getBlackEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='Brown'
			{
				$current = grammarAccess.getColorAccess().getBrownEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getColorAccess().getBrownEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='Pink'
			{
				$current = grammarAccess.getColorAccess().getPinkEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getColorAccess().getPinkEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='Darkgrey'
			{
				$current = grammarAccess.getColorAccess().getDarkGreyEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getColorAccess().getDarkGreyEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='LightGrey'
			{
				$current = grammarAccess.getColorAccess().getLightGreyEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getColorAccess().getLightGreyEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='White'
			{
				$current = grammarAccess.getColorAccess().getWhiteEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getColorAccess().getWhiteEnumLiteralDeclaration_11());
			}
		)
	)
;

// Rule ChartType
ruleChartType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Pie'
			{
				$current = grammarAccess.getChartTypeAccess().getPieEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getChartTypeAccess().getPieEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Bar'
			{
				$current = grammarAccess.getChartTypeAccess().getBarEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getChartTypeAccess().getBarEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Area'
			{
				$current = grammarAccess.getChartTypeAccess().getAreaEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getChartTypeAccess().getAreaEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Bubble'
			{
				$current = grammarAccess.getChartTypeAccess().getBubbleEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getChartTypeAccess().getBubbleEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Line'
			{
				$current = grammarAccess.getChartTypeAccess().getLineEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getChartTypeAccess().getLineEnumLiteralDeclaration_4());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
