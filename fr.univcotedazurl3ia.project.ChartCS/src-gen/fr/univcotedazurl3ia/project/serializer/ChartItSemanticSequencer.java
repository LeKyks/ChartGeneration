/*
 * generated by Xtext 2.25.0
 */
package fr.univcotedazurl3ia.project.serializer;

import com.google.inject.Inject;
import fr.univcotedazurl3ia.project.ChartItAS.Chart;
import fr.univcotedazurl3ia.project.ChartItAS.ChartItASPackage;
import fr.univcotedazurl3ia.project.ChartItAS.Col;
import fr.univcotedazurl3ia.project.ChartItAS.Data;
import fr.univcotedazurl3ia.project.ChartItAS.Program;
import fr.univcotedazurl3ia.project.services.ChartItGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ChartItSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ChartItGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ChartItASPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ChartItASPackage.CHART:
				sequence_Chart(context, (Chart) semanticObject); 
				return; 
			case ChartItASPackage.COL:
				sequence_Col(context, (Col) semanticObject); 
				return; 
			case ChartItASPackage.DATA:
				sequence_Data(context, (Data) semanticObject); 
				return; 
			case ChartItASPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Chart returns Chart
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         data=[Data|STRING] 
	 *         type=ChartType 
	 *         col+=[Col|STRING] 
	 *         col+=[Col|STRING]* 
	 *         backgroundColor=Color
	 *     )
	 */
	protected void sequence_Chart(ISerializationContext context, Chart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Col returns Col
	 *
	 * Constraint:
	 *     (name=STRING label=STRING color=Color)
	 */
	protected void sequence_Col(ISerializationContext context, Col semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ChartItASPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ChartItASPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ChartItASPackage.Literals.COL__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ChartItASPackage.Literals.COL__LABEL));
			if (transientValues.isValueTransient(semanticObject, ChartItASPackage.Literals.COL__COLOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ChartItASPackage.Literals.COL__COLOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getColAccess().getLabelSTRINGTerminalRuleCall_5_0(), semanticObject.getLabel());
		feeder.accept(grammarAccess.getColAccess().getColorColorEnumRuleCall_9_0(), semanticObject.getColor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Data returns Data
	 *
	 * Constraint:
	 *     (name=STRING path=STRING)
	 */
	protected void sequence_Data(ISerializationContext context, Data semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ChartItASPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ChartItASPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ChartItASPackage.Literals.DATA__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ChartItASPackage.Literals.DATA__PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDataAccess().getPathSTRINGTerminalRuleCall_3_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         loadData+=Data+ 
	 *         loadData+=Data* 
	 *         col+=Col+ 
	 *         col+=Col* 
	 *         chart+=Chart+ 
	 *         chart+=Chart*
	 *     )
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
