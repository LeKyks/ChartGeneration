/*
 * generated by Xtext 2.25.0
 */
package fr.univcotedazurl3ia.project.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.univcotedazurl3ia.project.ide.contentassist.antlr.internal.InternalChartItParser;
import fr.univcotedazurl3ia.project.services.ChartItGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ChartItParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ChartItGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ChartItGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getColorAccess().getAlternatives(), "rule__Color__Alternatives");
			builder.put(grammarAccess.getChartTypeAccess().getAlternatives(), "rule__ChartType__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getProgramAccess().getGroup_8(), "rule__Program__Group_8__0");
			builder.put(grammarAccess.getProgramAccess().getGroup_13(), "rule__Program__Group_13__0");
			builder.put(grammarAccess.getProgramAccess().getGroup_18(), "rule__Program__Group_18__0");
			builder.put(grammarAccess.getDataAccess().getGroup(), "rule__Data__Group__0");
			builder.put(grammarAccess.getChartAccess().getGroup(), "rule__Chart__Group__0");
			builder.put(grammarAccess.getChartAccess().getGroup_14(), "rule__Chart__Group_14__0");
			builder.put(grammarAccess.getColAccess().getGroup(), "rule__Col__Group__0");
			builder.put(grammarAccess.getProgramAccess().getNameAssignment_3(), "rule__Program__NameAssignment_3");
			builder.put(grammarAccess.getProgramAccess().getLoadDataAssignment_7(), "rule__Program__LoadDataAssignment_7");
			builder.put(grammarAccess.getProgramAccess().getLoadDataAssignment_8_1(), "rule__Program__LoadDataAssignment_8_1");
			builder.put(grammarAccess.getProgramAccess().getColAssignment_12(), "rule__Program__ColAssignment_12");
			builder.put(grammarAccess.getProgramAccess().getColAssignment_13_1(), "rule__Program__ColAssignment_13_1");
			builder.put(grammarAccess.getProgramAccess().getChartAssignment_17(), "rule__Program__ChartAssignment_17");
			builder.put(grammarAccess.getProgramAccess().getChartAssignment_18_1(), "rule__Program__ChartAssignment_18_1");
			builder.put(grammarAccess.getDataAccess().getNameAssignment_1(), "rule__Data__NameAssignment_1");
			builder.put(grammarAccess.getDataAccess().getPathAssignment_3(), "rule__Data__PathAssignment_3");
			builder.put(grammarAccess.getChartAccess().getNameAssignment_1(), "rule__Chart__NameAssignment_1");
			builder.put(grammarAccess.getChartAccess().getDataAssignment_5(), "rule__Chart__DataAssignment_5");
			builder.put(grammarAccess.getChartAccess().getTypeAssignment_9(), "rule__Chart__TypeAssignment_9");
			builder.put(grammarAccess.getChartAccess().getColAssignment_13(), "rule__Chart__ColAssignment_13");
			builder.put(grammarAccess.getChartAccess().getColAssignment_14_1(), "rule__Chart__ColAssignment_14_1");
			builder.put(grammarAccess.getChartAccess().getBackgroundColorAssignment_18(), "rule__Chart__BackgroundColorAssignment_18");
			builder.put(grammarAccess.getColAccess().getNameAssignment_1(), "rule__Col__NameAssignment_1");
			builder.put(grammarAccess.getColAccess().getLabelAssignment_5(), "rule__Col__LabelAssignment_5");
			builder.put(grammarAccess.getColAccess().getColorAssignment_9(), "rule__Col__ColorAssignment_9");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ChartItGrammarAccess grammarAccess;

	@Override
	protected InternalChartItParser createParser() {
		InternalChartItParser result = new InternalChartItParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ChartItGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ChartItGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
